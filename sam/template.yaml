AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-new-AP-automation

  Sample SAM Template for sam-new-AP-automation

Metadata:
  License: Apache-2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Github configurations"
        Parameters:
          - GithubRepoName
          - ThumbprintList

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128


Parameters:
  SpringInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
                    t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
                    m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
                    c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
                    g3.8xlarge,
                    r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
                    i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
                    d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  MongoInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
                    t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
                    m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
                    c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
                    g3.8xlarge,
                    r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
                    i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
                    d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 154.14.5.82/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  HTTPLocation:
    Description: The IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  MongoLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 154.14.5.82/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: A thumbprint of an Open ID Connector is a SHA1 hash of the public certificate of the host

  GithubRepoName:
    Type: String
    Default: gabiUrsachi/APAutomationSystem
    Description: GitHub repository name Ex-TestUser/TestCodeDeploy

  AutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Enter the Min Size for the ASG
  AutoScalingGroupMaxSize:
    Type: Number
    Default: 3
    Description: Enter the Max Size for the ASG
  AutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2
    Description: Enter the Desired Size for the ASG
  KeyName:
    Type: String
    Default: new-key
  MyVPC:
    Type: String
    Default: "vpc-0b4c0b455deba60bc"
    Description: Enter the desired VPC ID
  MySubnets:
    Type: String
    Default: "subnet-03f5e20efb207d7fa,subnet-0ea5093ef923147e2,subnet-02ec950ebb96b6e0c,subnet-0a472381511f5e378,subnet-0fee3d4dade52dd3c,subnet-0d8a643e427b7c1d1"
    Description: Enter a comma-separated list of strings representing your desired subnets
  MyAZs:
    Type: String
    Default: "us-east-1a,us-east-1b,us-east-1c,us-east-1d,us-east-1e,us-east-1f"
    Description: Enter a comma-separated list of strings representing your desired availability zones

Mappings:
  RegionMap:
    us-east-1:
      ami: "ami-01c647eace872fc02"

Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: code/
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: !GetAtt SQSQueue.Arn
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !Sub arn:${AWS::Partition}:s3:::*
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              -
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource: "*"
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: "fileTransferQueue.fifo"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DLQueue.Arn
        maxReceiveCount: 15


  DLQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "fileTransferDLQ.fifo"
      FifoQueue: true

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !GetAtt MyLambdaFunction.Arn

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        Fn::Split:
          - ","
          - !Ref MySubnets
      SecurityGroups: [ !GetAtt LoadBalancerSecurityGroup.GroupId ]
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'false'


  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: MyVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3

  HTTPAutoScalingListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref EC2TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP



  HTTPSAutoScalingListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: "arn:aws:acm:us-east-1:969353689472:certificate/90cae704-de9e-464c-ab01-832cc74c8608"
      DefaultActions:
        - TargetGroupArn: !Ref EC2TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS


  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: WebappRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        -
          PolicyName: "allow-webapp-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:getObject"
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:ListExports"
                  - "cloudformation:ExportStacks"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "s3:*"
#                  - "s3:PutObject"
#                  - "s3:PutObjectAcl"
#                  - "s3:GetObject"
#                  - "s3:ListBucket"
#                  - "s3:ListAllMyBuckets"
#                  - "s3:GetObjectAcl"
#                  - "s3:DeleteObject"
#                  - "s3:HeadObject"
#                  - "s3:CreateBucket"
                Resource: !Sub arn:${AWS::Partition}:s3:::*
              -
                Effect: "Allow"
                Action:
                  - "sqs:ListQueues"
                  - "sqs:GetQueueUrl"
                  - "sqs:SendMessage"
                Resource: !GetAtt SQSQueue.Arn

  WebappInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: WebappRole


  WebappLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      VersionDescription: InitialVersion
      LaunchTemplateData:
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - ami
        InstanceType:
          Ref: SpringInstanceType
        KeyName:
          Ref: KeyName
        SecurityGroups: [!Ref 'SpringInstanceSecurityGroup']
        IamInstanceProfile:
          Arn: !GetAtt WebappInstanceProfile.Arn
        UserData:
          "Fn::Base64":
            !Sub |
            #!/bin/bash
            
            sudo yum  install -y java-11 wget
            java -version
            
            yum install nginx -y
            sed -i 's/^\s*server_name\s _;/server_name _; \n location \/ { \n proxy_pass http:\/\/127.0.0.1:8080\/;\n}\n /g' /etc/nginx/nginx.conf
            systemctl start nginx
            yum install ruby -y
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            cd /tmp
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Cooldown: "72000"
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      LaunchTemplate:
        LaunchTemplateId: !Ref WebappLaunchTemplate
        Version: !GetAtt WebappLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: spring-app
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      AvailabilityZones:
        Fn::Split:
          - ","
          - !Ref MyAZs

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP,/S requests
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'HTTPLocation'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'HTTPLocation'

  SpringInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and HTTP requests via port 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref 'HTTPLocation'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'HTTPLocation'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'HTTPLocation'

  MongoInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: !Ref 'MongoLocation'
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId:  !GetAtt SpringInstanceSecurityGroup.GroupId

  MongoEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'MongoInstanceType'
      SecurityGroups: [!Ref 'MongoInstanceSecurityGroup']
      KeyName:
        Ref: KeyName
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - ami
      Tags:
        - Key: Name
          Value: mongo-db
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          set -xe

          sudo echo "
          [mongodb-org-7.0]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/7.0/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc" > /etc/yum.repos.d/mongodb-org.repo
          
          sudo yum update -y
          sudo yum install -y mongodb-mongosh-shared-openssl3
          sudo yum install -y mongodb-org --exclude=mongodb-mongosh

          sudo sed -i "s/^  bindIp: .*/  bindIp: 0.0.0.0/" /etc/mongod.conf
          sudo systemctl daemon-reload
          sudo systemctl enable mongod
          sudo systemctl start mongod

          gen_uuid() {
            uuidgen -r | tr -d "-"
          }

          cat > /home/ec2-user/init_data.js << EOF
          db = db.getSiblingDB("APsystem");
          db.createCollection("user");
          db.user.insert({
          _id: "FB4E91A2-84A3-7983-8B12-8EBD940EE998",
          username : "admin",
          password : '\$2a\$15\$EDXzPtbMw2AxW4OXRDvs6.qdWDegH.bLhegtMGEywcETSxksrGDCW',
          roles : [
            "ADMIN"
          ]
          });
          
          db.createCollection("company");
          db.company.insertMany([
          {
            "_id" : Binary(Buffer.from("$(gen_uuid)", "hex"), 4),
            "name" : "CompanyA"
          },
          {
            "_id" : Binary(Buffer.from("$(gen_uuid)", "hex"), 4),
            "name" : "CompanyB"
          },
          {
            "_id" : Binary(Buffer.from("$(gen_uuid)", "hex"), 4),
            "name" : "CompanyC"
          }
          ]);
          EOF

          # Add a delay to ensure the file is fully written
          sleep 5
          
          # Run mongosh in the background
          nohup mongosh --file /home/ec2-user/init_data.js > /dev/null 2>&1 &
          
          # Wait for the mongosh process to finish
          while pgrep -x "mongosh" > /dev/null; do
            sleep 5
          done

  WebappDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  IDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: "https://token.actions.githubusercontent.com"
      ClientIdList:
        - "sts.amazonaws.com"
      ThumbprintList:
        - !Ref ThumbprintList

  GitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: CodeDeployRoleforGitHub
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref IDCProvider
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubRepoName}:*
      MaxSessionDuration: 3600
      Description: "Github Actions role"
      Policies:

        - PolicyName: 'CodeDeployRoleforGitHub-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:Get*'
                  - 'codedeploy:Batch*'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:List*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 's3:putObject'
                Resource: !Sub arn:${AWS::Partition}:s3:::${WebappDeploymentBucket}/*

  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: CodeDeployAppNameWithASG
  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: CodeDeployGroupName
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_REQUEST
      Ec2TagFilters:
        - Key: Name
          Type: KEY_AND_VALUE
          Value: spring-app
      AutoScalingGroups:
        - Ref: AutoScalingGroup


  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'

Outputs:
  MyLambdaFunction:
    Description: "My Lambda Function ARN"
    Value: !GetAtt MyLambdaFunction.Arn
  MyLambdaFunctionIamRole:
    Description: "IAM Role created for my lambda function"
    Value: !GetAtt LambdaExecutionRole.Arn
  DeploymentBucket:
    Description: Deployment bucket
    Value: !Ref WebappDeploymentBucket
  GithubIAMRoleArn:
    Description: IAM role for GitHub
    Value: !GetAtt GitHubIAMRole.Arn
  DeploymentGroup:
    Description: Webapp Deployment Group
    Value: !Ref WebappDeploymentGroup
  ApplicationName:
    Description: CodeDeploy Application name
    Value: !Ref WebappApplication
  MongoEC2InstancePrivateIP:
    Description: Private IP address of the newly created Mongo EC2 instance
    Value: !GetAtt [MongoEC2Instance, PrivateIp]
  ExportedIDCProvider:
    Description: Exported IAM OIDC Provider
    Value: !Ref IDCProvider
    Export:
      Name: ExportedIDCProvider
